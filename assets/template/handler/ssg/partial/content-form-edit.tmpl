{{ define "content-form-edit" }}
{{ $form := .Form }}
<form id="content-form" action="{{ .Form.Action }}" method="post" class="space-y-4">
  <input type="hidden" name="_method" value="{{ .Form.Method }}" />
  <input type="hidden" name="aquamarine.csrf.token" value="{{ .Form.CSRF }}" />
  <input type="hidden" name="id" value="{{ .Data.ID }}" />
  <div>
    <label for="heading" class="block text-sm font-medium text-gray-700">
      Heading:
    </label>
    <input
      type="text"
      id="heading"
      name="heading"
      value="{{ .Data.Heading }}"
      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
    />
  </div>

  <!-- Images Section - moved above buttons -->
  <div id="images-section" class="hidden mt-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
    <div class="flex justify-between items-center mb-3">
      <h4 class="text-sm font-medium text-gray-700">Content Images</h4>
      <button
        type="button"
        onclick="openImageUploadModal('{{ .Data.ID }}', 'content', 'content', 'content')"
        class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        ðŸ“· Upload Image
      </button>
    </div>

    <!-- Image Gallery -->
    <div id="image-gallery" class="grid grid-cols-2 md:grid-cols-4 gap-3">
      <!-- Images will be populated here -->
    </div>

    <p class="text-xs text-gray-500 mt-2">Click on content images to insert them into your markdown at the cursor position.</p>
  </div>

  <div id="markdown-pane">
    <label for="body" class="block text-sm font-medium text-gray-700">
      Body:
    </label>
    <textarea
      id="body"
      name="body"
      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
      rows="6"
    >{{ .Data.Body }}</textarea>
  </div>

  <!-- Hidden field for header image path -->
  <input type="hidden" id="image" name="image" value="{{ .Data.Image }}" />

  <!-- Header Image Selector -->
  <div class="mb-6 p-4 border border-gray-200 rounded-lg bg-gray-50">
    <h4 class="text-sm font-medium text-gray-700 mb-3">Header Image</h4>
    <div id="content-header-gallery" class="w-full">
      <!-- Header image will be populated here -->
    </div>
  </div>

  <div>
    <label for="section_id" class="block text-sm font-medium text-gray-700">Section:</label>
    <select
      id="section_id"
      name="section_id"
      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
      required
    >
      {{- range $section := .Select.sections }}
        <option value="{{ $section.Value }}" {{ if eq $.Data.SectionID $section.Value }}selected{{ end }}>{{ $section.Label }}</option>
      {{- end }}
    </select>
    {{ FieldMsg $form "section_id" }}
  </div>
  <div>
    <label for="user_id" class="block text-sm font-medium text-gray-700">Author:</label>
    <select
      id="user_id"
      name="user_id"
      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
      required
    >
        <option value="00000000-0000-0000-0000-000000000001" {{if eq .Data.UserID "00000000-0000-0000-0000-000000000001"}}selected{{end}}>Admin User</option>
    </select>
    {{ FieldMsg $form "user_id" }}
  

  <div class="flex items-center justify-between gap-4">
    <div>
        <button
          type="button"
          onclick="toggleImageSection()"
          class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-500 hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-400"
        >
          ðŸ“· Images
        </button>
    </div>
    <div class="static-action-buttons flex items-center gap-2">
        <button type="button" id="zen-mode-btn-static" class="p-2 rounded-md border" title="Zen mode (alt+z)">ðŸ§˜</button>
    </div>
  </div>
</form>


<script>
// Toggle image section visibility
function toggleImageSection() {
  const section = document.getElementById('images-section');
  if (section.classList.contains('hidden')) {
    section.classList.remove('hidden');
    loadImageGallery();
    loadHeaderImageGallery();
  } else {
    section.classList.add('hidden');
  }
}

// Load header image gallery
function loadHeaderImageGallery() {
  const contentId = document.querySelector('input[name="id"]').value;
  if (!contentId || contentId === '00000000-0000-0000-0000-000000000000') {
    displayHeaderImage('');
    return;
  }

  // Get current header image from hidden field
  const headerImagePath = document.getElementById('image').value;
  displayHeaderImage(headerImagePath);
}

// Display header image in gallery
function displayHeaderImage(headerImagePath) {
  const gallery = document.getElementById('content-header-gallery');
  gallery.innerHTML = '';

  if (headerImagePath) {
    const imageDiv = createHeaderImageCard(headerImagePath);
    gallery.appendChild(imageDiv);
  } else {
    const placeholderDiv = createHeaderImagePlaceholder();
    gallery.appendChild(placeholderDiv);
  }
}

// Create header image card with delete button
function createHeaderImageCard(imagePath) {
  const div = document.createElement('div');
  div.className = 'relative border border-gray-300 rounded-lg overflow-hidden bg-white w-full';

  const imageUrl = `/static/images/${imagePath}`;

  div.innerHTML = `
    <img src="${imageUrl}" alt="Header Image" class="w-full h-48 object-cover">
    <div class="absolute top-2 right-2">
      <button
        type="button"
        onclick="removeHeaderImage()"
        class="bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600"
        title="Remove header image"
      >
        Ã—
      </button>
    </div>
    <div class="p-2 text-center">
      <span class="text-xs text-gray-500">Header Image</span>
    </div>
  `;

  return div;
}

// Create placeholder card for empty header image state
function createHeaderImagePlaceholder() {
  const div = document.createElement('div');
  div.className = 'border-2 border-dashed border-gray-300 rounded-lg bg-gray-50 h-48 flex flex-col items-center justify-center w-full';

  div.innerHTML = `
    <div class="text-gray-400 text-2xl mb-2">ðŸ“·</div>
    <span class="text-xs text-gray-500 mb-2">Header Image</span>
    <button
      type="button"
      onclick="uploadHeaderImage()"
      class="text-xs text-blue-500 hover:text-blue-700"
    >
      Click to upload
    </button>
  `;

  return div;
}

// Upload header image (for placeholder button)
function uploadHeaderImage() {
  const contentId = document.querySelector('input[name="id"]').value;
  openImageUploadModal(contentId, 'content', 'image', 'header');
}

// Remove header image
function removeHeaderImage() {
  if (!confirm('Are you sure you want to remove the header image?')) {
    return;
  }

  const contentId = document.querySelector('input[name="id"]').value;

  // Clear the hidden field first
  document.getElementById('image').value = '';

  // Refresh gallery immediately
  loadHeaderImageGallery();

  // Make API call to delete from server and filesystem
  deleteHeaderImageFromServer(contentId);
}

// Delete header image from server
async function deleteHeaderImageFromServer(contentId) {
  if (!contentId || contentId === '00000000-0000-0000-0000-000000000000') {
    return;
  }

  try {
    // TODO: API URL should come from config, not hardcoded
    const response = await fetch(`http://localhost:8081/api/v1/ssg/contents/${contentId}/images/header`, {
      method: 'DELETE'
    });

    if (!response.ok) {
      console.error('Failed to delete header image from server:', response.statusText);
    }
  } catch (error) {
    console.error('Error deleting header image from server:', error);
  }
}

// Load images for gallery
async function loadImageGallery() {
  const contentId = document.querySelector('input[name="id"]').value;
  if (!contentId || contentId === '00000000-0000-0000-0000-000000000000') {
    return;
  }

  try {
    // TODO: Hardcoded localhost:8081 breaks when backend port changes
    const response = await fetch(`http://localhost:8081/api/v1/ssg/contents/${contentId}/images`);
    if (response.ok) {
      const data = await response.json();
      displayImages(data.data.images || []);
    }
  } catch (error) {
    console.error('Failed to load images:', error);
  }
}

// Remove content image
function removeContentImage(imagePath) {
  if (!confirm('Are you sure you want to remove this image?')) {
    return;
  }

  const contentId = document.querySelector('input[name="id"]').value;

  // Refresh gallery immediately to show removal
  loadImageGallery();

  // Make API call to delete from server and filesystem
  deleteContentImageFromServer(contentId, imagePath);
}

// Delete content image from server
async function deleteContentImageFromServer(contentId, imagePath) {
  if (!contentId || contentId === '00000000-0000-0000-0000-000000000000') {
    return;
  }

  try {
    // URL encode the image path for the API call
    // Send image path in request body instead of URL
    // TODO: This hardcoded URL should be configurable
    const response = await fetch(`http://localhost:8081/api/v1/ssg/contents/${contentId}/images/delete`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        image_path: imagePath
      })
    });

    if (!response.ok) {
      console.error('Failed to delete image from server:', response.statusText);
      // Refresh gallery to show current state
      loadImageGallery();
    }
  } catch (error) {
    console.error('Error deleting image from server:', error);
    // Refresh gallery to show current state
    loadImageGallery();
  }
}

// Load header image on page load for edit forms
document.addEventListener('DOMContentLoaded', function() {
  loadHeaderImageGallery();
});

// Display images in gallery
function displayImages(images) {
  const gallery = document.getElementById('image-gallery');
  gallery.innerHTML = '';

  if (images.length === 0) {
    gallery.innerHTML = '<p class="text-gray-500 text-sm col-span-full">No images uploaded yet.</p>';
    return;
  }

  images.forEach(imagePath => {
    // Skip header images - they're handled separately now
    if (imagePath.includes('_header_')) {
      return;
    }

    const div = document.createElement('div');
    div.className = 'relative group border border-gray-300 rounded-lg overflow-hidden hover:border-blue-500';

    const imageUrl = `/static/images/${imagePath}`;

    div.innerHTML = `
      <img src="${imageUrl}" alt="Content image" class="w-full h-20 object-cover cursor-pointer" onclick="insertImageIntoMarkdown('${imagePath}')">
      <div class="absolute top-2 right-2 z-10">
        <button
          type="button"
          class="delete-image-btn bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600 opacity-0 group-hover:opacity-100 transition-opacity"
          title="Remove image"
          data-image-path="${imagePath}"
        >
          Ã—
        </button>
      </div>
      <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 flex items-center justify-center transition-all pointer-events-none">
        <span class="text-white text-xs opacity-0 group-hover:opacity-100">Insert</span>
      </div>
    `;

    // Add event listener for delete button
    const deleteBtn = div.querySelector('.delete-image-btn');
    deleteBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      removeContentImage(imagePath);
    });

    gallery.appendChild(div);
  });
}

// Insert image into markdown at cursor position
function insertImageIntoMarkdown(imagePath) {
  const textarea = document.getElementById('body');
  const cursorPos = textarea.selectionStart;
  const textBefore = textarea.value.substring(0, cursorPos);
  const textAfter = textarea.value.substring(cursorPos);

  const filename = imagePath.split('/').pop().replace(/\.[^/.]+$/, ""); // Remove extension for alt text
  const imageMarkdown = `![${filename}](/static/images/${imagePath})`;

  textarea.value = textBefore + imageMarkdown + textAfter;

  // Set cursor after inserted text
  const newCursorPos = cursorPos + imageMarkdown.length;
  textarea.focus();
  textarea.setSelectionRange(newCursorPos, newCursorPos);

  // Trigger preview update
  if (typeof updatePreview === 'function') {
    updatePreview();
  }
}

// Update gallery after successful upload
function onImageUploadSuccess(result) {
  // Update hidden field if it's a header image
  if (result.imageType === 'header') {
    document.getElementById('image').value = result.relative_path;
  }

  // Refresh galleries if visible
  const section = document.getElementById('images-section');
  if (!section.classList.contains('hidden')) {
    loadImageGallery();
    loadHeaderImageGallery();
  }
}
</script>

{{/* Meta Modal */}}
<div id="meta-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity">
  <div class="fixed inset-0 z-10 overflow-y-auto">
      <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
          <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
              <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div class="sm:flex sm:items-start">
                      <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                          <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">Publishing</h3>
                          <div class="mt-2 space-y-4" id="meta-fields">
                              <div class="grid grid-cols-3 gap-x-4 gap-y-2">
                                  <div class="flex items-center pt-6">
                                    <input type="checkbox" id="featured" name="featured" value="true" {{ if .Data.Featured }}checked{{ end }} class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                    <label for="featured" class="ml-2 block text-sm text-gray-900">Featured</label>
                                  </div>
                                  <div class="col-span-2">
                                    <label for="published_at" class="block text-sm font-medium text-gray-700">Published At:</label>
                                    <input type="datetime-local" id="published_at" name="published_at" value="{{ if .Data.PublishedAt }}{{ .Data.PublishedAt.Format "2006-01-02T15:04" }}{{ end }}" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                  </div>
                                  <div class="col-start-2 col-span-2 flex justify-end">
                                      <div class="flex items-center">
                                          <input type="checkbox" id="draft" name="draft" value="true" {{ if .Data.Draft }}checked{{ end }} class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                          <label for="draft" class="ml-2 block text-sm text-gray-900">Draft</label>
                                      </div>
                                  </div>
                                </div>

                                <fieldset class="border-t border-gray-200 pt-4">
                                  <legend class="text-lg font-medium text-gray-900">SEO</legend>
                                  <div class="space-y-4 mt-2">
                                    <div>
                                      <label for="description" class="block text-sm font-medium text-gray-700">Description:</label>
                                      <textarea id="description" name="description" rows="3" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">{{ .Data.Meta.Description }}</textarea>
                                    </div>
                                    <div>
                                      <label for="keywords" class="block text-sm font-medium text-gray-700">Keywords:</label>
                                      <input type="text" id="keywords" name="keywords" value="{{ .Data.Meta.Keywords }}" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    </div>
                                    <div>
                                      <label for="robots" class="block text-sm font-medium text-gray-700">Robots:</label>
                                      <input type="text" id="robots" name="robots" value="{{ .Data.Meta.Robots }}" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    </div>
                                    <div>
                                      <label for="canonical_url" class="block text-sm font-medium text-gray-700">Canonical URL:</label>
                                      <input type="url" id="canonical_url" name="canonical_url" value="{{ .Data.Meta.CanonicalURL }}" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    </div>
                                  </div>
                                </fieldset>

                                <fieldset class="border-t border-gray-200 pt-4">
                                  <legend class="text-lg font-medium text-gray-900">Settings</legend>
                                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
                                      <div class="flex items-center">
                                          <input type="checkbox" id="table_of_contents" name="table_of_contents" value="true" {{ if .Data.Meta.TableOfContents }}checked{{ end }} class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                          <label for="table_of_contents" class="ml-2 block text-sm text-gray-900">Show Table of Contents</label>
                                      </div>
                                      <div class="flex items-center">
                                          <input type="checkbox" id="share" name="share" value="true" {{ if .Data.Meta.Share }}checked{{ end }} class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                          <label for="share" class="ml-2 block text-sm text-gray-900">Enable Share Buttons</label>
                                      </div>
                                      <div class="flex items-center">
                                          <input type="checkbox" id="comments" name="comments" value="true" {{ if .Data.Meta.Comments }}checked{{ end }} class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                          <label for="comments" class="ml-2 block text-sm text-gray-900">Enable Comments</label>
                                      </div>
                                  </div>
                                </fieldset>
                          </div>
                      </div>
                  </div>
              </div>
              <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                  <button type="button" id="meta-modal-close-btn" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">Close</button>
              </div>
          </div>
      </div>
  </div>
</div>

{{ end }}
